

//递归，遍历
class Solution {
public:
    
    void helper(TreeNode* root, vector<int>& temp)
    {
        if(root==nullptr)
        {    
            return;
        }
        else
        {
            temp.push_back(root->val);
            helper(root->left, temp);
            helper(root->right, temp);        
        }
    }
    vector<int> preorderTraversal(TreeNode* root) {
        
        vector<int> preorder;
        helper(root, preorder);
        return preorder;
        
    }
};

//递归，divide and conquer

class Solution {
public:
    
    vector<int> preorderTraversal(TreeNode* root) {
    
        vector<int> preorder;
        if(root==nullptr)
        {
            return {};
        }
    
        vector<int> lefttrees = preorderTraversal(root->left);
        vector<int> righttrees = preorderTraversal(root->right);
        
        preorder.push_back(root->val);
        
        preorder.insert(preorder.end(), lefttrees.begin(), lefttrees.end());
        
        preorder.insert(preorder.end(), righttrees.begin(), righttrees.end());
        
        return preorder;
        

    }

};


//非递归, stack
class Solution {
public:
    
    vector<int> preorderTraversal(TreeNode* root) {
    
        stack<TreeNode*> tree_stack;
        vector<int> preorder;
    
        if(root==nullptr)
        {
            return {};
        }
        
        tree_stack.push(root);
        
        while(tree_stack.empty()==false)
        {
            TreeNode* node = tree_stack.top(); // get the top elment in the stack
            tree_stack.pop(); // notice, we need to remove the element
            preorder.push_back(node->val);
            if(node->right != nullptr)
            {
                tree_stack.push(node->right);
            }
            if(node->left != nullptr)
            {
                tree_stack.push(node->left);
            }
            
        }

        
        return preorder;
        

    }

};

